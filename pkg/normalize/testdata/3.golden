[
    {
        "description": "root pointer ref",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": false,
            "properties": {
                "foo": {
                    "$ref": "#"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo": false
                },
                "description": "match",
                "valid": true
            },
            {
                "data": {
                    "foo": {
                        "foo": false
                    }
                },
                "description": "recursive match",
                "valid": true
            },
            {
                "data": {
                    "bar": false
                },
                "description": "mismatch",
                "valid": false
            },
            {
                "data": {
                    "foo": {
                        "bar": false
                    }
                },
                "description": "recursive mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "relative pointer ref to object",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "properties": {
                "bar": {
                    "$ref": "#/properties/foo"
                },
                "foo": {
                    "type": "integer"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "bar": 3
                },
                "description": "match",
                "valid": true
            },
            {
                "data": {
                    "bar": true
                },
                "description": "mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "relative pointer ref to array",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "prefixItems": [
                {
                    "type": "integer"
                },
                {
                    "$ref": "#/prefixItems/0"
                }
            ]
        },
        "tests": [
            {
                "data": [
                    1,
                    2
                ],
                "description": "match array",
                "valid": true
            },
            {
                "data": [
                    1,
                    "foo"
                ],
                "description": "mismatch array",
                "valid": false
            }
        ]
    },
    {
        "description": "escaped pointer ref",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "percent%field": {
                    "type": "integer"
                },
                "slash/field": {
                    "type": "integer"
                },
                "tilde~field": {
                    "type": "integer"
                }
            },
            "properties": {
                "percent": {
                    "$ref": "#/$defs/percent%25field"
                },
                "slash": {
                    "$ref": "#/$defs/slash~1field"
                },
                "tilde": {
                    "$ref": "#/$defs/tilde~0field"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "slash": "aoeu"
                },
                "description": "slash invalid",
                "valid": false
            },
            {
                "data": {
                    "tilde": "aoeu"
                },
                "description": "tilde invalid",
                "valid": false
            },
            {
                "data": {
                    "percent": "aoeu"
                },
                "description": "percent invalid",
                "valid": false
            },
            {
                "data": {
                    "slash": 123
                },
                "description": "slash valid",
                "valid": true
            },
            {
                "data": {
                    "tilde": 123
                },
                "description": "tilde valid",
                "valid": true
            },
            {
                "data": {
                    "percent": 123
                },
                "description": "percent valid",
                "valid": true
            }
        ]
    },
    {
        "description": "nested refs",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "a": {
                    "type": "integer"
                },
                "b": {
                    "$ref": "#/$defs/a"
                },
                "c": {
                    "$ref": "#/$defs/b"
                }
            },
            "$ref": "#/$defs/c"
        },
        "tests": [
            {
                "data": 5,
                "description": "nested ref valid",
                "valid": true
            },
            {
                "data": "a",
                "description": "nested ref invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "ref applies alongside sibling keywords",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "reffed": {
                    "type": "array"
                }
            },
            "properties": {
                "foo": {
                    "$ref": "#/$defs/reffed",
                    "maxItems": 2
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo": []
                },
                "description": "ref valid, maxItems valid",
                "valid": true
            },
            {
                "data": {
                    "foo": [
                        1,
                        2,
                        3
                    ]
                },
                "description": "ref valid, maxItems invalid",
                "valid": false
            },
            {
                "data": {
                    "foo": "string"
                },
                "description": "ref invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "remote ref, containing refs itself",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$ref": "https://json-schema.org/draft/2020-12/schema"
        },
        "tests": [
            {
                "data": {
                    "minLength": 1
                },
                "description": "remote ref valid",
                "valid": true
            },
            {
                "data": {
                    "minLength": -1
                },
                "description": "remote ref invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "property named $ref that is not a reference",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "properties": {
                "$ref": {
                    "type": "string"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "$ref": "a"
                },
                "description": "property named $ref valid",
                "valid": true
            },
            {
                "data": {
                    "$ref": 2
                },
                "description": "property named $ref invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "property named $ref, containing an actual $ref",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "is-string": {
                    "type": "string"
                }
            },
            "properties": {
                "$ref": {
                    "$ref": "#/$defs/is-string"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "$ref": "a"
                },
                "description": "property named $ref valid",
                "valid": true
            },
            {
                "data": {
                    "$ref": 2
                },
                "description": "property named $ref invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "$ref to boolean schema true",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bool": true
            },
            "$ref": "#/$defs/bool"
        },
        "tests": [
            {
                "data": "foo",
                "description": "any value is valid",
                "valid": true
            }
        ]
    },
    {
        "description": "$ref to boolean schema false",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bool": false
            },
            "$ref": "#/$defs/bool"
        },
        "tests": [
            {
                "data": "foo",
                "description": "any value is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "Recursive references between schemas",
        "schema": {
            "$id": "http://localhost:1234/draft2020-12/tree",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "node": {
                    "$id": "http://localhost:1234/draft2020-12/node",
                    "description": "node",
                    "type": "object",
                    "required": [
                        "value"
                    ],
                    "properties": {
                        "subtree": {
                            "$ref": "tree"
                        },
                        "value": {
                            "type": "number"
                        }
                    }
                }
            },
            "description": "tree of nodes",
            "type": "object",
            "required": [
                "meta",
                "nodes"
            ],
            "properties": {
                "meta": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "node"
                    }
                }
            }
        },
        "tests": [
            {
                "data": {
                    "meta": "root",
                    "nodes": [
                        {
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 1.1
                                    },
                                    {
                                        "value": 1.2
                                    }
                                ]
                            },
                            "value": 1
                        },
                        {
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 2.1
                                    },
                                    {
                                        "value": 2.2
                                    }
                                ]
                            },
                            "value": 2
                        }
                    ]
                },
                "description": "valid tree",
                "valid": true
            },
            {
                "data": {
                    "meta": "root",
                    "nodes": [
                        {
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": "string is invalid"
                                    },
                                    {
                                        "value": 1.2
                                    }
                                ]
                            },
                            "value": 1
                        },
                        {
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 2.1
                                    },
                                    {
                                        "value": 2.2
                                    }
                                ]
                            },
                            "value": 2
                        }
                    ]
                },
                "description": "invalid tree",
                "valid": false
            }
        ]
    },
    {
        "description": "refs with quote",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "foo\"bar": {
                    "type": "number"
                }
            },
            "properties": {
                "foo\"bar": {
                    "$ref": "#/$defs/foo%22bar"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo\"bar": 1
                },
                "description": "object with numbers is valid",
                "valid": true
            },
            {
                "data": {
                    "foo\"bar": "1"
                },
                "description": "object with strings is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "ref creates new scope when adjacent to keywords",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "A": {
                    "unevaluatedProperties": false
                }
            },
            "$ref": "#/$defs/A",
            "properties": {
                "prop1": {
                    "type": "string"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "prop1": "match"
                },
                "description": "referenced subschema doesn't see annotations from properties",
                "valid": false
            }
        ]
    },
    {
        "description": "naive replacement of $ref with its destination is not correct",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "a_string": {
                    "type": "string"
                }
            },
            "enum": [
                {
                    "$ref": "#/$defs/a_string"
                }
            ]
        },
        "tests": [
            {
                "data": "this is a string",
                "description": "do not evaluate the $ref inside the enum, matching any string",
                "valid": false
            },
            {
                "data": {
                    "type": "string"
                },
                "description": "do not evaluate the $ref inside the enum, definition exact match",
                "valid": false
            },
            {
                "data": {
                    "$ref": "#/$defs/a_string"
                },
                "description": "match the enum exactly",
                "valid": true
            }
        ]
    },
    {
        "description": "refs with relative uris and defs",
        "schema": {
            "$id": "http://example.com/schema-relative-uri-defs1.json",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$ref": "schema-relative-uri-defs2.json",
            "properties": {
                "foo": {
                    "$id": "schema-relative-uri-defs2.json",
                    "$defs": {
                        "inner": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "$ref": "#/$defs/inner"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "bar": "a",
                    "foo": {
                        "bar": 1
                    }
                },
                "description": "invalid on inner field",
                "valid": false
            },
            {
                "data": {
                    "bar": 1,
                    "foo": {
                        "bar": "a"
                    }
                },
                "description": "invalid on outer field",
                "valid": false
            },
            {
                "data": {
                    "bar": "a",
                    "foo": {
                        "bar": "a"
                    }
                },
                "description": "valid on both fields",
                "valid": true
            }
        ]
    },
    {
        "description": "relative refs with absolute uris and defs",
        "schema": {
            "$id": "http://example.com/schema-refs-absolute-uris-defs1.json",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$ref": "schema-refs-absolute-uris-defs2.json",
            "properties": {
                "foo": {
                    "$id": "http://example.com/schema-refs-absolute-uris-defs2.json",
                    "$defs": {
                        "inner": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "$ref": "#/$defs/inner"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "bar": "a",
                    "foo": {
                        "bar": 1
                    }
                },
                "description": "invalid on inner field",
                "valid": false
            },
            {
                "data": {
                    "bar": 1,
                    "foo": {
                        "bar": "a"
                    }
                },
                "description": "invalid on outer field",
                "valid": false
            },
            {
                "data": {
                    "bar": "a",
                    "foo": {
                        "bar": "a"
                    }
                },
                "description": "valid on both fields",
                "valid": true
            }
        ]
    },
    {
        "description": "$id must be resolved against nearest parent, not just immediate parent",
        "schema": {
            "$id": "http://example.com/a.json",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "x": {
                    "$id": "http://example.com/b/c.json",
                    "not": {
                        "$defs": {
                            "y": {
                                "$id": "d.json",
                                "type": "number"
                            }
                        }
                    }
                }
            },
            "allOf": [
                {
                    "$ref": "http://example.com/b/d.json"
                }
            ]
        },
        "tests": [
            {
                "data": 1,
                "description": "number is valid",
                "valid": true
            },
            {
                "data": "a",
                "description": "non-number is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "order of evaluation: $id and $ref",
        "schema": {
            "$id": "/draft2020-12/ref-and-id1/base.json",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bigint": {
                    "$id": "int.json",
                    "$comment": "canonical uri: /ref-and-id1/int.json",
                    "maximum": 10
                },
                "smallint": {
                    "$id": "/draft2020-12/ref-and-id1-int.json",
                    "$comment": "canonical uri: /ref-and-id1-int.json",
                    "maximum": 2
                }
            },
            "$ref": "int.json",
            "$comment": "$id must be evaluated before $ref to get the proper $ref destination"
        },
        "tests": [
            {
                "data": 5,
                "description": "data is valid against first definition",
                "valid": true
            },
            {
                "data": 50,
                "description": "data is invalid against first definition",
                "valid": false
            }
        ]
    },
    {
        "description": "order of evaluation: $id and $anchor and $ref",
        "schema": {
            "$id": "/draft2020-12/ref-and-id2/base.json",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bigint": {
                    "$comment": "canonical uri: /ref-and-id2/base.json#/$defs/bigint; another valid uri for this location: /ref-and-id2/base.json#bigint",
                    "$anchor": "bigint",
                    "maximum": 10
                },
                "smallint": {
                    "$id": "/draft2020-12/ref-and-id2/",
                    "$comment": "canonical uri: /ref-and-id2#/$defs/smallint; another valid uri for this location: /ref-and-id2/#bigint",
                    "$anchor": "bigint",
                    "maximum": 2
                }
            },
            "$ref": "#bigint",
            "$comment": "$id must be evaluated before $ref to get the proper $ref destination"
        },
        "tests": [
            {
                "data": 5,
                "description": "data is valid against first definition",
                "valid": true
            },
            {
                "data": 50,
                "description": "data is invalid against first definition",
                "valid": false
            }
        ]
    },
    {
        "description": "simple URN base URI with $ref via the URN",
        "schema": {
            "$id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$comment": "URIs do not have to have HTTP(s) schemes",
            "properties": {
                "foo": {
                    "$ref": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed"
                }
            },
            "minimum": 30
        },
        "tests": [
            {
                "data": {
                    "foo": 37
                },
                "description": "valid under the URN IDed schema",
                "valid": true
            },
            {
                "data": {
                    "foo": 12
                },
                "description": "invalid under the URN IDed schema",
                "valid": false
            }
        ]
    },
    {
        "description": "simple URN base URI with JSON pointer",
        "schema": {
            "$id": "urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bar": {
                    "type": "string"
                }
            },
            "$comment": "URIs do not have to have HTTP(s) schemes",
            "properties": {
                "foo": {
                    "$ref": "#/$defs/bar"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo": "bar"
                },
                "description": "a string is valid",
                "valid": true
            },
            {
                "data": {
                    "foo": 12
                },
                "description": "a non-string is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "URN base URI with NSS",
        "schema": {
            "$id": "urn:example:1/406/47452/2",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bar": {
                    "type": "string"
                }
            },
            "$comment": "RFC 8141 §2.2",
            "properties": {
                "foo": {
                    "$ref": "#/$defs/bar"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo": "bar"
                },
                "description": "a string is valid",
                "valid": true
            },
            {
                "data": {
                    "foo": 12
                },
                "description": "a non-string is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "URN base URI with r-component",
        "schema": {
            "$id": "urn:example:foo-bar-baz-qux?+CCResolve:cc=uk",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bar": {
                    "type": "string"
                }
            },
            "$comment": "RFC 8141 §2.3.1",
            "properties": {
                "foo": {
                    "$ref": "#/$defs/bar"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo": "bar"
                },
                "description": "a string is valid",
                "valid": true
            },
            {
                "data": {
                    "foo": 12
                },
                "description": "a non-string is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "URN base URI with q-component",
        "schema": {
            "$id": "urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bar": {
                    "type": "string"
                }
            },
            "$comment": "RFC 8141 §2.3.2",
            "properties": {
                "foo": {
                    "$ref": "#/$defs/bar"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo": "bar"
                },
                "description": "a string is valid",
                "valid": true
            },
            {
                "data": {
                    "foo": 12
                },
                "description": "a non-string is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "URN base URI with f-component",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$ref": "https://json-schema.org/draft/2020-12/schema",
            "$comment": "RFC 8141 §2.3.3, but we don't allow fragments"
        },
        "tests": [
            {
                "data": {
                    "$id": "urn:example:foo-bar-baz-qux#somepart"
                },
                "description": "is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "URN base URI with URN and JSON pointer ref",
        "schema": {
            "$id": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bar": {
                    "type": "string"
                }
            },
            "properties": {
                "foo": {
                    "$ref": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/$defs/bar"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo": "bar"
                },
                "description": "a string is valid",
                "valid": true
            },
            {
                "data": {
                    "foo": 12
                },
                "description": "a non-string is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "URN base URI with URN and anchor ref",
        "schema": {
            "$id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {
                "bar": {
                    "type": "string",
                    "$anchor": "something"
                }
            },
            "properties": {
                "foo": {
                    "$ref": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"
                }
            }
        },
        "tests": [
            {
                "data": {
                    "foo": "bar"
                },
                "description": "a string is valid",
                "valid": true
            },
            {
                "data": {
                    "foo": 12
                },
                "description": "a non-string is invalid",
                "valid": false
            }
        ]
    },
    {
        "description": "URN ref with nested pointer ref",
        "schema": {
            "$defs": {
                "foo": {
                    "$id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                    "$defs": {
                        "bar": {
                            "type": "string"
                        }
                    },
                    "$ref": "#/$defs/bar"
                }
            },
            "$ref": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed"
        },
        "tests": [
            {
                "data": "bar",
                "description": "a string is valid",
                "valid": true
            },
            {
                "data": 12,
                "description": "a non-string is invalid",
                "valid": false
            }
        ]
    }
]
